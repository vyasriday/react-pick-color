{"version":3,"sources":["components/ColorPallete/Color-Item/Color-Item.js","components/ColorPallete/ColorPallete.js","components/Header/Header.js","components/Drawer/Drawer.js","App.js","serviceWorker.js","index.js"],"names":["ColorItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","color","setColor","bind","assertThisInitialized","changeColor","react_default","a","createElement","title","className","style","backgroundColor","onClick","Component","ColorPallete","changeParentColor","newColor","_this2","colorArray","map","key","Color_Item_Color_Item","Header","components_ColorPallete_ColorPallete","Drawer","drawerColor","App","changeDrawerColor","setState","components_Header_Header","components_Drawer_Drawer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06a01955.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Color-Item.css';\n\nclass ColorItem extends Component { \n\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: props.color\n    } \n    this.setColor = this.setColor.bind(this);\n  }\n\n  setColor() {\n    this.props.changeColor(this.state.color);\n  }\n   render() {\n     return(\n       <div>\n         <span title=\"click to change drawer color\" className=\"color-item\" style={{backgroundColor: this.state.color}} onClick={this.setColor}></span>\n      </div>\n     )\n   }\n    \n  \n} \n\nexport default ColorItem;","import React, {Component} from 'react';\nimport './ColorPallete.css';\nimport ColorItem from './Color-Item/Color-Item';\n\nclass ColorPallete extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.changeParentColor = this.changeParentColor.bind(this);\n  }\n\n  changeParentColor(newColor) {\n    this.props.changeColor(newColor);\n  }\n  render() {\n    return(\n      <div className=\"colorBox\">\n      {this.props.colorArray.map((color, key) => <ColorItem  color= {color} key={key} changeColor = {this.changeParentColor} />\n      )}\n      </div>\n    )\n  }\n}\n\nexport default ColorPallete;","import React, {Component} from 'react';\nimport './Header.css';\nimport ColorPallete from '../ColorPallete/ColorPallete';\n\nclass Header extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      colorArray : ['#FF7F00', '#00FF00', '#AAFFCC', '#0022EE'],\n    }\n    this.changeParentColor = this.changeParentColor.bind(this);\n  }\n  \n  // this will change the parent app's color state \n  changeParentColor(newColor) {\n    this.props.changeColor(newColor);\n  }\n  render() {\n    return(\n      <div className=\"header\">\n        <ColorPallete colorArray={this.state.colorArray} changeColor={this.changeParentColor} />\n      </div>\n    )\n  }\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport './Drawer.css';\n\nclass Drawer extends Component {\n  render() {\n    return(\n      <section className=\"drawer\" style={{backgroundColor: this.props.drawerColor }}>\n        <h2>Color Drawer</h2>\n      </section>\n\n    )\n  }\n}\n\nexport default Drawer;\n","import React, { Component } from 'react';\nimport Header from './components/Header/Header';\nimport Drawer from './components/Drawer/Drawer';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n        color: 'orangered'\n    }\n    this.changeDrawerColor = this.changeDrawerColor.bind(this);\n  }\n   changeDrawerColor(newColor) {\n     this.setState({\n       color: newColor\n     })\n   } \n\n  render() {\n    return (\n      <div className=\"wrapper\">\n       <Header changeColor= {this.changeDrawerColor}/>\n       <Drawer \n        drawerColor = {this.state.color} />\n      </div>\n    );\n  }\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}